{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"contact/","text":"GSQL Mkdocs Code Highlighter Contact Dan McCreary","title":"Contact"},{"location":"contact/#gsql-mkdocs-code-highlighter-contact","text":"Dan McCreary","title":"GSQL Mkdocs Code Highlighter Contact"},{"location":"gsql-test/","text":"","title":"GSQL"},{"location":"python-test/","text":"Test of Python Code Highlighting # Statements from __future__ import with_statement # Import from sys import path as thing print(thing) assert True # keyword def foo(): # function definition return [] class Bar(object): # Class definition def __enter__(self): pass def __exit__(self, *args): pass foo() # UNCOLOURED: function call while False: # 'while' continue for x in foo(): # 'for' break with Bar() as stuff: pass if False: pass # 'if' elif False: pass else: pass # Constants 'single-quote', u'unicode' # Strings of all kinds; prefixes not highlighted \"double-quote\" \"\"\"triple double-quote\"\"\" '''triple single-quote''' r'raw' ur'unicode raw' 'escape\\n' '\\04' # octal '\\xFF' # hex '\\u1111' # unicode character 1 # Integral 1L 1.0 # Float .1 1+2j # Complex # Expressions 1 and 2 or 3 # Boolean operators 2 < 3 # UNCOLOURED: comparison operators spam = 42 # UNCOLOURED: assignment 2 + 3 # UNCOLOURED: number operators [] # UNCOLOURED: list {} # UNCOLOURED: dict (1,) # UNCOLOURED: tuple all # Built-in functions GeneratorExit # Exceptions","title":"Python Test"},{"location":"python-test/#test-of-python-code-highlighting","text":"# Statements from __future__ import with_statement # Import from sys import path as thing print(thing) assert True # keyword def foo(): # function definition return [] class Bar(object): # Class definition def __enter__(self): pass def __exit__(self, *args): pass foo() # UNCOLOURED: function call while False: # 'while' continue for x in foo(): # 'for' break with Bar() as stuff: pass if False: pass # 'if' elif False: pass else: pass # Constants 'single-quote', u'unicode' # Strings of all kinds; prefixes not highlighted \"double-quote\" \"\"\"triple double-quote\"\"\" '''triple single-quote''' r'raw' ur'unicode raw' 'escape\\n' '\\04' # octal '\\xFF' # hex '\\u1111' # unicode character 1 # Integral 1L 1.0 # Float .1 1+2j # Complex # Expressions 1 and 2 or 3 # Boolean operators 2 < 3 # UNCOLOURED: comparison operators spam = 42 # UNCOLOURED: assignment 2 + 3 # UNCOLOURED: number operators [] # UNCOLOURED: list {} # UNCOLOURED: dict (1,) # UNCOLOURED: tuple all # Built-in functions GeneratorExit # Exceptions","title":"Test of Python Code Highlighting"},{"location":"references/","text":"References Mkdocs https://squidfunk.github.io/mkdocs-material/reference/code-blocks/#highlight","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#mkdocs","text":"https://squidfunk.github.io/mkdocs-material/reference/code-blocks/#highlight","title":"Mkdocs"},{"location":"sql-test/","text":"","title":"SQL Test"}]}