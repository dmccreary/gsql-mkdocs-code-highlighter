{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"contact/","text":"GSQL Mkdocs Code Highlighter Contact Dan McCreary","title":"Contact"},{"location":"contact/#gsql-mkdocs-code-highlighter-contact","text":"Dan McCreary","title":"GSQL Mkdocs Code Highlighter Contact"},{"location":"gsql-test/","text":"GSQL Syntax Highlighting Test Test 1 CREATE QUERY countPeople () FOR GRAPH Friends { /* Initialize Seed */ people = { Person . * } ; /* How many people vertices are there in the entire graph? */ PRINT people . size (); } Test 2 CREATE QUERY topCoLiked ( vertex < User > input_user , INT topk ) FOR GRAPH gsql_demo { SumAccum < int > @ cnt = 0 ; # @ cnt is a runtime attribute to be associated with each User vertex # to record how many times a user is liked . L0 = { input_user } ; L1 = SELECT tgt FROM L0 - ( Liked_By ) -> User : tgt ; L2 = SELECT tgt FROM L1 - ( Liked ) -> : tgt WHERE tgt != input_user ACCUM tgt . @ cnt += 1 ORDER BY tgt . @ cnt DESC LIMIT topk ; PRINT L2 ; } PageRank Test CREATE QUERY pageRank ( float maxChange , int maxIteration , float dampingFactor ) FOR GRAPH gsql_demo { # In each iteration , compute a score for each vertex : # score = dampingFactor + ( 1 - dampingFactor ) * sum ( received scores from its neighbors ). # The pageRank algorithm stops when either of the following is true : # a ) it reaches maxIterations iterations ; # b ) max score difference of any vertex compared to the last iteration <= maxChange . # @@ prefix means a global accumulator ; # @ prefix means an individual accumulator associated with each vertex MaxAccum < float > @@ maxDifference = 9999 ; # max score change in an iteration SumAccum < float > @ received_score = 0 ; # sum of scores each vertex receives from neighbors SumAccum < float > @ score = 1 ; # initial score for every vertex is 1 . AllV = { Page . * } ; # Start with all vertices of type Page WHILE @@ maxDifference > maxChange LIMIT maxIteration DO @@ maxDifference = 0 ; S = SELECT s FROM AllV : s - ( Linkto ) -> : t ACCUM t . @ received_score += s . @ score / s . outdegree () POST - ACCUM s . @ score = dampingFactor + ( 1 - dampingFactor ) * s . @ received_score , s . @ received_score = 0 , @@ maxDifference += abs ( s . @ score - s . @ score ' ); PRINT @@ maxDifference ; # print to default json result END ; # end while loop # PRINT AllV . page_id , AllV . @ score ; # print the results , JSON output API version v1 PRINT AllV [ AllV . page_id , AllV . @ score ]; # print the results , JSON output API version v2 } # end query","title":"GSQL"},{"location":"gsql-test/#gsql-syntax-highlighting-test","text":"","title":"GSQL Syntax Highlighting Test"},{"location":"gsql-test/#test-1","text":"CREATE QUERY countPeople () FOR GRAPH Friends { /* Initialize Seed */ people = { Person . * } ; /* How many people vertices are there in the entire graph? */ PRINT people . size (); }","title":"Test 1"},{"location":"gsql-test/#test-2","text":"CREATE QUERY topCoLiked ( vertex < User > input_user , INT topk ) FOR GRAPH gsql_demo { SumAccum < int > @ cnt = 0 ; # @ cnt is a runtime attribute to be associated with each User vertex # to record how many times a user is liked . L0 = { input_user } ; L1 = SELECT tgt FROM L0 - ( Liked_By ) -> User : tgt ; L2 = SELECT tgt FROM L1 - ( Liked ) -> : tgt WHERE tgt != input_user ACCUM tgt . @ cnt += 1 ORDER BY tgt . @ cnt DESC LIMIT topk ; PRINT L2 ; }","title":"Test 2"},{"location":"gsql-test/#pagerank-test","text":"CREATE QUERY pageRank ( float maxChange , int maxIteration , float dampingFactor ) FOR GRAPH gsql_demo { # In each iteration , compute a score for each vertex : # score = dampingFactor + ( 1 - dampingFactor ) * sum ( received scores from its neighbors ). # The pageRank algorithm stops when either of the following is true : # a ) it reaches maxIterations iterations ; # b ) max score difference of any vertex compared to the last iteration <= maxChange . # @@ prefix means a global accumulator ; # @ prefix means an individual accumulator associated with each vertex MaxAccum < float > @@ maxDifference = 9999 ; # max score change in an iteration SumAccum < float > @ received_score = 0 ; # sum of scores each vertex receives from neighbors SumAccum < float > @ score = 1 ; # initial score for every vertex is 1 . AllV = { Page . * } ; # Start with all vertices of type Page WHILE @@ maxDifference > maxChange LIMIT maxIteration DO @@ maxDifference = 0 ; S = SELECT s FROM AllV : s - ( Linkto ) -> : t ACCUM t . @ received_score += s . @ score / s . outdegree () POST - ACCUM s . @ score = dampingFactor + ( 1 - dampingFactor ) * s . @ received_score , s . @ received_score = 0 , @@ maxDifference += abs ( s . @ score - s . @ score ' ); PRINT @@ maxDifference ; # print to default json result END ; # end while loop # PRINT AllV . page_id , AllV . @ score ; # print the results , JSON output API version v1 PRINT AllV [ AllV . page_id , AllV . @ score ]; # print the results , JSON output API version v2 } # end query","title":"PageRank Test"},{"location":"python-test/","text":"Test of Python Code Highlighting # Statements from __future__ import with_statement # Import from sys import path as thing print ( thing ) assert True # keyword def foo (): # function definition return [] class Bar ( object ): # Class definition def __enter__ ( self ): pass def __exit__ ( self , * args ): pass foo () # UNCOLOURED: function call while False : # 'while' continue for x in foo (): # 'for' break with Bar () as stuff : pass if False : pass # 'if' elif False : pass else : pass # Constants 'single-quote' , u 'unicode' # Strings of all kinds; prefixes not highlighted \"double-quote\" \"\"\"triple double-quote\"\"\" '''triple single-quote''' r 'raw' ur 'unicode raw' 'escape \\n ' ' \\04 ' # octal ' \\xFF ' # hex ' \\u1111 ' # unicode character 1 # Integral 1 L 1.0 # Float . 1 1 + 2 j # Complex # Expressions 1 and 2 or 3 # Boolean operators 2 < 3 # UNCOLOURED: comparison operators spam = 42 # UNCOLOURED: assignment 2 + 3 # UNCOLOURED: number operators [] # UNCOLOURED: list {} # UNCOLOURED: dict ( 1 ,) # UNCOLOURED: tuple all # Built-in functions GeneratorExit # Exceptions","title":"Python Test"},{"location":"python-test/#test-of-python-code-highlighting","text":"# Statements from __future__ import with_statement # Import from sys import path as thing print ( thing ) assert True # keyword def foo (): # function definition return [] class Bar ( object ): # Class definition def __enter__ ( self ): pass def __exit__ ( self , * args ): pass foo () # UNCOLOURED: function call while False : # 'while' continue for x in foo (): # 'for' break with Bar () as stuff : pass if False : pass # 'if' elif False : pass else : pass # Constants 'single-quote' , u 'unicode' # Strings of all kinds; prefixes not highlighted \"double-quote\" \"\"\"triple double-quote\"\"\" '''triple single-quote''' r 'raw' ur 'unicode raw' 'escape \\n ' ' \\04 ' # octal ' \\xFF ' # hex ' \\u1111 ' # unicode character 1 # Integral 1 L 1.0 # Float . 1 1 + 2 j # Complex # Expressions 1 and 2 or 3 # Boolean operators 2 < 3 # UNCOLOURED: comparison operators spam = 42 # UNCOLOURED: assignment 2 + 3 # UNCOLOURED: number operators [] # UNCOLOURED: list {} # UNCOLOURED: dict ( 1 ,) # UNCOLOURED: tuple all # Built-in functions GeneratorExit # Exceptions","title":"Test of Python Code Highlighting"},{"location":"references/","text":"References Mkdocs https://squidfunk.github.io/mkdocs-material/reference/code-blocks/#highlight Python Markdown Code Hilite Extesnion for Mkdocs Python Markdown Code Hilite -The CodeHilite extension adds code/syntax highlighting to standard Python-Markdown code blocks using Pygments. Pygments Python Syntax Highlighter https://pygments.org/ Pygments Styles https://pygments.org/docs/styles/ Pygments Demo Pygments Demo Pygments Lexers for Graph Query Languages Pygments Lexers for Graph Query Languages VIM GSQL Lexer by Josh Meekhof Josh Meekhof's GSQL Syntax Highlighter for VIM David Baker Effendi's Visual Studio Code GSQL Extension David Baker Effendi's Visual Studio Code GSQL Extension The format for this is a JSON file: GSQL Language Grammar in JSON Atom GSQL Text Highlighter Alej Andropoveda Atom GSQL Text Highlighter The lexical grammer is stored in a CSON file: https://github.com/alejandropoveda/atom-language-gsql/blob/master/grammars/gsql.cson A CSON is a CoffeeScript Object Notation which is how ATOM configuration files are written. Sublime GSQL Text Highlighter by Frank Blau Frank Blau's Sublime Text Highlighter The syntax grammer rules are stored in a YML 1.2 file: https://github.com/fjblau/gsql-sublime/blob/master/gsql.sublime-syntax","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#mkdocs","text":"https://squidfunk.github.io/mkdocs-material/reference/code-blocks/#highlight","title":"Mkdocs"},{"location":"references/#python-markdown-code-hilite-extesnion-for-mkdocs","text":"Python Markdown Code Hilite -The CodeHilite extension adds code/syntax highlighting to standard Python-Markdown code blocks using Pygments.","title":"Python Markdown Code Hilite Extesnion for Mkdocs"},{"location":"references/#pygments-python-syntax-highlighter","text":"https://pygments.org/","title":"Pygments Python Syntax Highlighter"},{"location":"references/#pygments-styles","text":"https://pygments.org/docs/styles/","title":"Pygments Styles"},{"location":"references/#pygments-demo","text":"Pygments Demo","title":"Pygments Demo"},{"location":"references/#pygments-lexers-for-graph-query-languages","text":"Pygments Lexers for Graph Query Languages","title":"Pygments Lexers for Graph Query Languages"},{"location":"references/#vim-gsql-lexer-by-josh-meekhof","text":"Josh Meekhof's GSQL Syntax Highlighter for VIM","title":"VIM GSQL Lexer by Josh Meekhof"},{"location":"references/#david-baker-effendis-visual-studio-code-gsql-extension","text":"David Baker Effendi's Visual Studio Code GSQL Extension The format for this is a JSON file: GSQL Language Grammar in JSON","title":"David Baker Effendi's Visual Studio Code GSQL Extension"},{"location":"references/#atom-gsql-text-highlighter","text":"Alej Andropoveda Atom GSQL Text Highlighter The lexical grammer is stored in a CSON file: https://github.com/alejandropoveda/atom-language-gsql/blob/master/grammars/gsql.cson A CSON is a CoffeeScript Object Notation which is how ATOM configuration files are written.","title":"Atom GSQL Text Highlighter"},{"location":"references/#sublime-gsql-text-highlighter-by-frank-blau","text":"Frank Blau's Sublime Text Highlighter The syntax grammer rules are stored in a YML 1.2 file: https://github.com/fjblau/gsql-sublime/blob/master/gsql.sublime-syntax","title":"Sublime GSQL Text Highlighter by Frank Blau"},{"location":"sql-test/","text":"SQL Test SELECT p . name AS product , p . listprice AS 'List Price' , p . discount AS 'discount' FROM production . product p JOIN production . productsubcategory s ON p . productsubcategoryid = s . productsubcategoryid WHERE s . name LIKE @ product AND p . listprice < @ maxprice ;","title":"SQL Test"},{"location":"sql-test/#sql-test","text":"SELECT p . name AS product , p . listprice AS 'List Price' , p . discount AS 'discount' FROM production . product p JOIN production . productsubcategory s ON p . productsubcategoryid = s . productsubcategoryid WHERE s . name LIKE @ product AND p . listprice < @ maxprice ;","title":"SQL Test"}]}